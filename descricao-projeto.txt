# DescriÃ§Ã£o do Projeto - Sistema de Contagem de Estoque

Este documento descreve em detalhes a estrutura do projeto, explicando a funÃ§Ã£o de cada pasta e arquivo.

---

## ğŸ“Œ Estrutura do Backend (/backend)
O backend Ã© um servidor **Node.js com Express.js**, responsÃ¡vel por processar as requisiÃ§Ãµes do frontend e interagir com o banco de dados PostgreSQL no CapRover.

### ğŸ“‚ /backend/src/
- **/controllers/** â†’ ContÃ©m a lÃ³gica de controle das requisiÃ§Ãµes feitas Ã  API.
  - **produtoController.js** â†’ Controla a lÃ³gica de listagem e registro de produtos.

- **/models/** â†’ ContÃ©m a configuraÃ§Ã£o do ORM utilizado para acessar o banco de dados.
  - **prisma.js** â†’ ConfiguraÃ§Ã£o do **Prisma ORM**, que gerencia a conexÃ£o com o PostgreSQL.

- **/routes/** â†’ Define as rotas da API, indicando quais URLs sÃ£o acessÃ­veis no backend.
  - **produtoRoutes.js** â†’ Define os endpoints para buscar e salvar produtos.

- **/middlewares/** â†’ ContÃ©m funÃ§Ãµes auxiliares que interceptam requisiÃ§Ãµes.
  - **errorHandler.js** â†’ Middleware que trata erros e retorna respostas apropriadas.

- **server.js** â†’ Arquivo principal do backend, onde o servidor Express.js Ã© iniciado.

---

## ğŸ“Œ ConfiguraÃ§Ã£o do Prisma (/backend/prisma)
- **schema.prisma** â†’ Define o modelo das tabelas do banco de dados (Produtos, Contagens, etc.).
- **migrations/** â†’ ContÃ©m os arquivos de migraÃ§Ã£o para atualizaÃ§Ã£o do banco.

---

## ğŸ“Œ Arquivos Importantes do Backend
- **.env** â†’ ContÃ©m variÃ¡veis de ambiente, incluindo a conexÃ£o com o banco.
- **package.json** â†’ Lista as dependÃªncias do backend.
- **nodemon.json** â†’ ConfiguraÃ§Ã£o para reiniciar automaticamente o backend em modo de desenvolvimento.
- **Dockerfile** â†’ Define as instruÃ§Ãµes para rodar o backend em um contÃªiner Docker no CapRover.

---

## ğŸ“Œ Estrutura do Frontend (/frontend)
O frontend Ã© uma aplicaÃ§Ã£o **React.js com Vite**, responsÃ¡vel por exibir os produtos e permitir a contagem.

### ğŸ“‚ /frontend/src/
- **/components/** â†’ ContÃ©m componentes reutilizÃ¡veis da interface.
  - **ProdutoLista.js** â†’ Renderiza a lista de produtos disponÃ­veis para contagem.

- **/pages/** â†’ ContÃ©m as pÃ¡ginas principais do sistema.
  - **Home.js** â†’ PÃ¡gina principal onde o usuÃ¡rio visualiza e insere contagens.

- **/services/** â†’ Gerencia as chamadas Ã  API do backend.
  - **api.js** â†’ Define a conexÃ£o com o backend via **Axios**.

- **App.js** â†’ ConfiguraÃ§Ã£o do **React Router** e estrutura do frontend.

---

## ğŸ“Œ Arquivos Importantes do Frontend
- **index.html** â†’ Arquivo principal do frontend, onde o React Ã© injetado.
- **vite.config.js** â†’ ConfiguraÃ§Ã£o do Vite para otimizar o desenvolvimento.
- **package.json** â†’ Lista as dependÃªncias do frontend.
- **Dockerfile** â†’ Define as instruÃ§Ãµes para rodar o frontend em um contÃªiner Docker no CapRover.

---

## ğŸ“Œ ConfiguraÃ§Ã£o do Deploy no CapRover (/caprover)
O **CapRover** serÃ¡ usado para hospedar a aplicaÃ§Ã£o e o banco de dados PostgreSQL no servidor Ubuntu.

- **docker-compose.yml** â†’ Arquivo que define os serviÃ§os a serem rodados no CapRover.
- **caprover-config.json** â†’ ConfiguraÃ§Ã£o personalizada do CapRover para o deploy.

---

## ğŸ“Œ Outros Arquivos
- **descricao-projeto.txt** â†’ Este documento, que descreve a estrutura do projeto.
- **README.md** â†’ InstruÃ§Ãµes gerais sobre como rodar e configurar o projeto.

---

# ğŸ“Œ ConclusÃ£o
Este projeto foi estruturado de forma modular e escalÃ¡vel, utilizando **React.js no frontend**, **Node.js no backend**, **PostgreSQL no CapRover** e **deploy automatizado** via Docker. Cada pasta e arquivo tem uma funÃ§Ã£o especÃ­fica, garantindo organizaÃ§Ã£o e fÃ¡cil manutenÃ§Ã£o.